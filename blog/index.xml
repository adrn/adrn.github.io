<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on apw</title>
    <link>https://adrian.pw/blog/</link>
    <description>Recent content in Blog on apw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://adrian.pw/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flexible (stellar spatial) density models with Jax</title>
      <link>https://adrian.pw/blog/flexible-density-model-jax/</link>
      <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://adrian.pw/blog/flexible-density-model-jax/</guid>
      <description>A problem I have frequently run into in astronomical data analysis is the need to infer parameters of a density model in which some aspects of the model are allowed to be flexible and other components are held more rigid (i.e. with a parametrized model). In these contexts, we are sometimes also interested in learning a flexible representation of the expected number or number density of objects along with a probability density function.</description>
    </item>
    
    <item>
      <title>Visualizing the 2017 solar eclipse with Astropy</title>
      <link>https://adrian.pw/blog/astropy-eclipse/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://adrian.pw/blog/astropy-eclipse/</guid>
      <description>from datetime import datetime import astropy.coordinates as coord from astropy.time import Time import astropy.units as u import numpy as np import pytz from IPython.display import HTML import matplotlib.pyplot as plt %matplotlib inline from matplotlib.dates import HourLocator, MinuteLocator, DateFormatter import matplotlib.animation as animation import matplotlib as mpl  # Set timezone here: mpl.rcParams[&amp;quot;timezone&amp;quot;] = &amp;quot;US/Eastern&amp;quot; # Enter address here: address = &amp;quot;4 Ivy Lane, Princeton, NJ&amp;quot;  Set up an array of times to get the sun and moon position during:</description>
    </item>
    
    <item>
      <title>Yearly sun graphs in Python with Astropy</title>
      <link>https://adrian.pw/blog/yearly-sun-graph/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adrian.pw/blog/yearly-sun-graph/</guid>
      <description>Molly Peeples (@astronomolly) recently tweeted some really cool plots from timeanddate.com that visualize local solar properties over a year from a location (e.g., twilights, solar noon, etc.), e.g.:
My first thought was: can we make those plots with Astropy? This post shows one way to make figures like this in Python using Astropy and Matplotlib.
from datetime import datetime # Third-party import astropy.coordinates as coord import astropy.units as u import astropy.</description>
    </item>
    
    <item>
      <title>Making a Matplotlib animation with a transparent background</title>
      <link>https://adrian.pw/blog/matplotlib-transparent-animation/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adrian.pw/blog/matplotlib-transparent-animation/</guid>
      <description>I recently needed to overlay a Matplotlib animation on an image in a keynote presentation. This requires creating an animation with a transparent background so that only the plot elements are shown. It turns out that this is possible using the Matplotlib animation objects (note: I&amp;rsquo;ve only tried this on Mac). The key elements to doing this are to (1) make the Matplotlib figure background invisible, (2) save the video using a png codec (yes, the image format), and (3) to pass keyword arguments through the animation object to the individual Matplotlib savefig calls.</description>
    </item>
    
  </channel>
</rss>
