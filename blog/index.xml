<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on apw</title>
    <link>https://adrian.pw/blog/</link>
    <description>Recent content in Blog on apw</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adrian.pw/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Toy examples and pitfalls of the Fisher information matrix</title>
      <link>https://adrian.pw/blog/fisher-information-toy/</link>
      <pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/fisher-information-toy/</guid>
      <description>I wrote this originally as a set of notes to a student, so it is a bit informal and conversational. I hope it is still useful!&#xA;The Fisher information matrix is the expectation value of the variance of the log-likelihood function, which is often just the expectation of the Hessian of the log-likelihood function (i.e. the second derivatives with respect to the model parameters). That&amp;rsquo;s just a boring definition! For a data set $D$ and model parameters $\theta$,</description>
    </item>
    <item>
      <title>Hierarchical Models 2: Mixture Models</title>
      <link>https://adrian.pw/blog/hierarchical-models-2/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/hierarchical-models-2/</guid>
      <description>import pathlib import astropy.coordinates as coord import astropy.units as u import astropy.table as at import matplotlib as mpl import matplotlib.pyplot as plt %matplotlib inline import numpy as np import daft import arviz as az import pymc as pm import aesara.tensor as tt In the examples in the Hierarchical Models 1 notebook, our models have assumed that all of the objects we observe are true members of the population we want to model (e.</description>
    </item>
    <item>
      <title>Hierarchical Models 1: Introduction</title>
      <link>https://adrian.pw/blog/hierarchical-models-1/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/hierarchical-models-1/</guid>
      <description>Note: I found a small bug in pymc (with TruncatedNormal) while writing this notebook, so you will need to install the latest version 4.2.0 or higher in order for the examples to complete successfully. You can install this with pip:&#xA;pip install pymc&amp;gt;=4.2.0 import pathlib import astropy.coordinates as coord import astropy.units as u import astropy.table as at import matplotlib as mpl import matplotlib.pyplot as plt %matplotlib inline import numpy as np import daft from pyia import GaiaData import arviz as az import pymc as pm Hierarchical Models 1 Most of the probabilistic models we have discussed so far have been one-level models: In these cases, the data are generated by some functional model that has parameters, and those parameters are random variables assumed to be drawn from fixed prior probability distributions.</description>
    </item>
    <item>
      <title>Probabilistic Graphical Models</title>
      <link>https://adrian.pw/blog/probabilistic-graphical-models/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/probabilistic-graphical-models/</guid>
      <description>import matplotlib as mpl import matplotlib.pyplot as plt %matplotlib inline import numpy as np import daft Note: This notebook has accompanying slides here&#xA;Graphical models are a useful tool for constructing probabilistic models. In one sentence, probabilistic graphical models (PGMs) use concepts from graph theory to help represent and conceptualize the complex relationships between random variables in probabilistic models. When visualized as graph diagrams, PGMs are useful for understanding models, for debugging, and for thinking about extensions or generalizations of models.</description>
    </item>
    <item>
      <title>Flexible (stellar spatial) density models with Jax</title>
      <link>https://adrian.pw/blog/flexible-density-model-jax/</link>
      <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/flexible-density-model-jax/</guid>
      <description>A problem I have frequently run into in astronomical data analysis is the need to infer parameters of a density model in which some aspects of the model are allowed to be flexible and other components are held more rigid (i.e. with a parametrized model). In these contexts, we are sometimes also interested in learning a flexible representation of the expected number or number density of objects along with a probability density function.</description>
    </item>
    <item>
      <title>Rasterize all lines below a layer with Matplotlib</title>
      <link>https://adrian.pw/blog/matplotlib-rasterize/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/matplotlib-rasterize/</guid>
      <description>I often generate matplotlib plots that contain thousands of lines, or millions of points. Depending on how these are drawn, this can make for huge (&amp;gt;10MB) PDF files. If a given plot is meant to be included as a figure in a paper, this can then make for even huger manuscript PDF sizes. This post is meant to be a short tip or note about how to slim down plot file sizes when you want to preserve vector graphics for some plot elements and just want to rasterize a large set of, e.</description>
    </item>
    <item>
      <title>Historical weather in NYC: Is fall always this warm?</title>
      <link>https://adrian.pw/blog/nyc-weather/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/nyc-weather/</guid>
      <description>It&amp;rsquo;s that time of the year in NYC: When the angle of the sunlight suggests that it should be autumn, but the foul, oozing, trash juice on your street curb enshrouding your entire block in oppressive swamp gas says otherwise. It&amp;rsquo;s late September, and it&amp;rsquo;s still effing hot in NYC.&#xA;Every year around this time I get frustrated with the weather because I&amp;rsquo;m ready for pants, boots, and hot beverages, but summer always seems to hold on for a bit too long (this week, during the autumnal equinox, it reached &amp;gt;90ยบ F).</description>
    </item>
    <item>
      <title>Fitting a straight line to data</title>
      <link>https://adrian.pw/blog/fitting-a-line/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/fitting-a-line/</guid>
      <description>Fitting a straight line to data This notebook is a ~1 hour tutorial on fitting models to data, starting with a linear model and progressing to a linear model with an extra nonlinear parameter (an unknown extra variance to account for unknown error bars or intrinsic scatter).&#xA;This notebook is heavily inspired by Hogg et al. 2010, @jakevdp&amp;rsquo;s notes, and parts of the emcee documentation.&#xA;Python imports we&amp;rsquo;ll need later&amp;hellip;</description>
    </item>
    <item>
      <title> Programming language mentions in the astronomical literature</title>
      <link>https://adrian.pw/blog/python-literature/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/python-literature/</guid>
      <description>import datetime import itertools from os import path import time import ads import matplotlib.pyplot as plt %matplotlib inline import numpy as np import pandas as pd from tqdm import tqdm I&amp;rsquo;m interested in how the popuarity of various programming languages and packages change with time, as measured by mentions in the astronomical literature. To answer this, I&amp;rsquo;m going to use the ads package to query the &amp;ldquo;astronomy&amp;rdquo; database API at the ADS to search for full-text mentions of the words:</description>
    </item>
    <item>
      <title>When is sunset?</title>
      <link>https://adrian.pw/blog/sunset-times/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/sunset-times/</guid>
      <description>tl;dr I visualized the local time of sunset today (2018-01-27) at every county in the continental US to see how sunset time depends on latitude and location within timezone.&#xA;I&amp;rsquo;m currently traveling through the pacific northwest (PNW) and have been surprised that sunset occurs at about the same (local) time as it does out in Princeton, NJ (where I currently live), despite the ~5 degree difference in latitude. It occurred to me that the local time of sunset probably depends a lot on your relative position within a timezone (at least within the continental US), so I wanted to make some visualizations related to this.</description>
    </item>
    <item>
      <title>Visualizing the 2017 solar eclipse with Astropy</title>
      <link>https://adrian.pw/blog/astropy-eclipse/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/astropy-eclipse/</guid>
      <description>from datetime import datetime import astropy.coordinates as coord from astropy.time import Time import astropy.units as u import numpy as np import pytz from IPython.display import HTML import matplotlib.pyplot as plt %matplotlib inline from matplotlib.dates import HourLocator, MinuteLocator, DateFormatter import matplotlib.animation as animation import matplotlib as mpl # Set timezone here: mpl.rcParams[&amp;quot;timezone&amp;quot;] = &amp;quot;US/Eastern&amp;quot; # Enter address here: address = &amp;quot;4 Ivy Lane, Princeton, NJ&amp;quot; Set up an array of times to get the sun and moon position during:</description>
    </item>
    <item>
      <title>Yearly sun graphs in Python with Astropy</title>
      <link>https://adrian.pw/blog/yearly-sun-graph/</link>
      <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/yearly-sun-graph/</guid>
      <description>Molly Peeples (@astronomolly) recently tweeted some really cool plots from timeanddate.com that visualize local solar properties over a year from a location (e.g., twilights, solar noon, etc.), e.g.:&#xA;My first thought was: can we make those plots with Astropy? This post shows one way to make figures like this in Python using Astropy and Matplotlib.&#xA;from datetime import datetime # Third-party import astropy.coordinates as coord import astropy.units as u import astropy.</description>
    </item>
    <item>
      <title>Making a Matplotlib animation with a transparent background</title>
      <link>https://adrian.pw/blog/matplotlib-transparent-animation/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://adrian.pw/blog/matplotlib-transparent-animation/</guid>
      <description>I recently needed to overlay a Matplotlib animation on an image in a keynote presentation. This requires creating an animation with a transparent background so that only the plot elements are shown. It turns out that this is possible using the Matplotlib animation objects (note: I&amp;rsquo;ve only tried this on Mac). The key elements to doing this are to (1) make the Matplotlib figure background invisible, (2) save the video using a png codec (yes, the image format), and (3) to pass keyword arguments through the animation object to the individual Matplotlib savefig calls.</description>
    </item>
  </channel>
</rss>
